##	这是在pkg\scheduler\schedule_one.go中的，对于Pod选择方法的相关描述	##
##	これは、Pod の選択方法の説明である									##
##	pkg\scheduler\schedule_one.go にあります								##

func (sched *Scheduler) schedulePod(ctx context.Context, fwk framework.Framework, state *framework.CycleState, pod *v1.Pod) (result ScheduleResult, err error) {

    trace := utiltrace.New("Scheduling", utiltrace.Field{Key: "namespace", Value: pod.Namespace}, utiltrace.Field{Key: "name", Value: pod.Name})
    defer trace.LogIfLong(100 * time.Millisecond)

    ## 开始追踪以监控调度过程
    ## スケジューリングプロセスを監視するためのトレースを開始します


    if err := sched.Cache.UpdateSnapshot(klog.FromContext(ctx), sched.nodeInfoSnapshot); err != nil {
        return result, err
    }
    trace.Step("Snapshotting scheduler cache and node infos done")

	##	更新调度器缓存快照
	##	スケジューラのキャッシュスナップショットを更新します


    if sched.nodeInfoSnapshot.NumNodes() == 0 {
        return result, ErrNoNodesAvailable
    }

	##	检查是否没有可用的节点
	##	利用可能なノードがないか確認します


    feasibleNodes, diagnosis, err := sched.findNodesThatFitPod(ctx, fwk, state, pod)
    if err != nil {
        return result, err
    }
    trace.Step("Computing predicates done")

	##	寻找适合该 Pod 的节点
    ##	そのPodに適合するノードを見つけます


    if len(feasibleNodes) == 0 {
        return result, &framework.FitError{
            Pod:         pod,
            NumAllNodes: sched.nodeInfoSnapshot.NumNodes(),
            Diagnosis:   diagnosis,
        }
    }

    ##	处理没有合适节点的情况
    ##	適切なノードがない場合を処理します


    if len(feasibleNodes) == 1 {
        return ScheduleResult{
            SuggestedHost:  feasibleNodes[0].Node().Name,
            EvaluatedNodes: diagnosis.EvaluatedNodes,
            FeasibleNodes:  1,
        }, nil
    }

    // 如果只有一个节点满足要求，直接使用那个节点
    // 要求を満たすノードは一つだけの場合、それを使用します


    priorityList, err := prioritizeNodes(ctx, sched.Extenders, fwk, state, pod, feasibleNodes)
    if err != nil {
        return result, err
    }

	##	如果有复数节点通过选择，将对节点进行优先级排序
    ##	要求を満たすノードは複数の場合、そちらのノードに優先順位付けします


    host, _, err := selectHost(priorityList, numberOfHighestScoredNodesToReport)
    trace.Step("Prioritizing done")

    ##	从优先级列表中选择最佳主机
    ##	優先順位付けされたリストから最適なホストを選択します

    return ScheduleResult{
        SuggestedHost:  host,
        EvaluatedNodes: diagnosis.EvaluatedNodes,
        FeasibleNodes:  len(feasibleNodes),
    }, err

    ##	返回最终的调度结果
    ##	最終的なスケジューリング結果を返します
}
